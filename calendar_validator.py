#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
–ß–µ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ - –Ω–∏–∫–∞–∫–æ–π –∑–∞—Å–æ—Ä–∫–∏
"""

import re
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple

logger = logging.getLogger(__name__)

class CalendarValidator:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self):
        # –ß–µ—Ç–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        self.calendar_keywords = {
            "–≤—Å—Ç—Ä–µ—á–∏": ["–≤—Å—Ç—Ä–µ—á–∞", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å", "—Å–≤–∏–¥–∞–Ω–∏–µ", "–¥–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞"],
            "–∑–≤–æ–Ω–∫–∏": ["–∑–≤–æ–Ω–æ–∫", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "—Å–æ–∑–≤–æ–Ω", "—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫", "–≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫"],
            "—Å–æ–±—ã—Ç–∏—è": ["—Å–æ–±—ã—Ç–∏–µ", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è", "—Å–µ–º–∏–Ω–∞—Ä", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"],
            "–ø—Ä–∏–µ–º—ã": ["–ø—Ä–∏–µ–º", "–ø—Ä–∏–µ–º —É –≤—Ä–∞—á–∞", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–≤—Ä–∞—á", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–∏–µ–º"],
            "–≤—Ä–µ–º—è": ["–≤", "–Ω–∞", "–∑–∞–≤—Ç—Ä–∞ –≤", "—Å–µ–≥–æ–¥–Ω—è –≤", "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤ —Å—Ä–µ–¥—É", "–≤ –ø—è—Ç–Ω–∏—Ü—É"]
        }
        
        # –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        self.not_calendar_keywords = [
            "–∫—É–ø–∏—Ç—å", "–∑–∞–±—Ä–∞—Ç—å", "–æ—Ç–Ω–µ—Å—Ç–∏", "—Å–¥–µ–ª–∞—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", 
            "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å", "–∏–∑—É—á–∏—Ç—å", "–≤—ã—É—á–∏—Ç—å", "–∑–∞–ø–æ–º–Ω–∏—Ç—å",
            "–ø–æ–¥—É–º–∞—Ç—å", "—Ä–µ—à–∏—Ç—å", "–≤—ã–±—Ä–∞—Ç—å", "–Ω–∞–π—Ç–∏", "–ø–æ–∏—Å–∫–∞—Ç—å"
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
        self.time_patterns = [
            r'(\d{1,2}):(\d{2})',  # 15:30, 9:00
            r'(\d{1,2})\.(\d{2})',  # 15.30, 9.00
            r'–≤ (\d{1,2})',  # –≤ 15, –≤ 9
            r'–Ω–∞ (\d{1,2})',  # –Ω–∞ 15, –Ω–∞ 9
        ]
    
    def should_go_to_calendar(self, text: str) -> Tuple[bool, str, Optional[datetime]]:
        """
        –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        
        Returns:
            (should_go, reason, event_time)
        """
        text_lower = text.lower()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ—Ç–∫–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        calendar_score = 0
        found_keywords = []
        
        for category, keywords in self.calendar_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    calendar_score += 1
                    found_keywords.append(keyword)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        not_calendar_score = 0
        for keyword in self.not_calendar_keywords:
            if keyword in text_lower:
                not_calendar_score += 1
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        has_time = self._extract_time(text) is not None
        
        # 4. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ—Ç–∫–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –ò –≤—Ä–µ–º—è - —Ç–æ—á–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if calendar_score > 0 and has_time:
            event_time = self._extract_time(text)
            return True, f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º: {', '.join(found_keywords)}", event_time
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        if calendar_score > 0 and not has_time:
            return False, f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏: {', '.join(found_keywords)}. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è!", None
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤ - –Ω–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if has_time and calendar_score == 0:
            return False, "–ï—Å—Ç—å –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", None
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "–Ω–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è" - —Ç–æ—á–Ω–æ –Ω–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if not_calendar_score > 0:
            return False, "–≠—Ç–æ –∑–∞–¥–∞—á–∞, –∞ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", None
        
        # –ü—Ä–∞–≤–∏–ª–æ 5: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        return False, "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", None
    
    def _extract_time(self, text: str) -> Optional[datetime]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        for pattern in self.time_patterns:
            match = re.search(pattern, text)
            if match:
                try:
                    hour = int(match.group(1))
                    minute = int(match.group(2)) if len(match.groups()) > 1 else 0
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
                    if 0 <= hour <= 23 and 0 <= minute <= 59:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
                        event_date = self._determine_date(text_lower)
                        return event_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
                except (ValueError, IndexError):
                    continue
        
        return None
    
    def _determine_date(self, text_lower: str) -> datetime:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è"""
        now = datetime.now()
        
        # –°–µ–≥–æ–¥–Ω—è
        if any(word in text_lower for word in ["—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å"]):
            return now
        
        # –ó–∞–≤—Ç—Ä–∞
        if "–∑–∞–≤—Ç—Ä–∞" in text_lower:
            return now + timedelta(days=1)
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä–≥": 3,
            "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
        }
        
        for day, day_num in weekdays.items():
            if day in text_lower:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                days_ahead = day_num - now.weekday()
                if days_ahead <= 0:  # –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                    days_ahead += 7
                return now + timedelta(days=days_ahead)
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–≤—Ç—Ä–∞
        return now + timedelta(days=1)
    
    def get_calendar_suggestions(self, text: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        text_lower = text.lower()
        suggestions = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if not self._extract_time(text):
            suggestions.append("‚Ä¢ –î–æ–±–∞–≤—å –≤—Ä–µ–º—è: '–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–∫–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
        if not any(keyword in text_lower for keyword in 
                  ["–≤—Å—Ç—Ä–µ—á–∞", "–∑–≤–æ–Ω–æ–∫", "—Å–æ–±—ã—Ç–∏–µ", "–ø—Ä–∏–µ–º", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"]):
            suggestions.append("‚Ä¢ –£—Ç–æ—á–Ω–∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: '–≤—Å—Ç—Ä–µ—á–∞', '–∑–≤–æ–Ω–æ–∫', '—Å–æ–±—ã—Ç–∏–µ'")
        
        if suggestions:
            return "üí° **–î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ª—É—á—à–µ:**\n" + "\n".join(suggestions)
        
        return "‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è!"


# –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
def test_calendar_validator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    validator = CalendarValidator()
    
    test_cases = [
        "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
        "–ó–≤–æ–Ω–æ–∫ –≤ 10:30",
        "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ",
        "–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç",
        "–ü—Ä–∏–µ–º —É –≤—Ä–∞—á–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00",
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ —Å—Ä–µ–¥—É",
        "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç",
        "–°–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00",
        "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 11:00"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n")
    
    for text in test_cases:
        should_go, reason, event_time = validator.should_go_to_calendar(text)
        suggestions = validator.get_calendar_suggestions(text)
        
        status = "üìÖ –ö–ê–õ–ï–ù–î–ê–†–¨" if should_go else "‚ùå –ù–ï –ö–ê–õ–ï–ù–î–ê–†–¨"
        time_str = f" ({event_time.strftime('%H:%M %d.%m')})" if event_time else ""
        
        print(f"{status}: {text}{time_str}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        if not should_go and "–≤—Ä–µ–º—è" in reason.lower():
            print(f"   {suggestions}")
        print()

if __name__ == "__main__":
    test_calendar_validator()
