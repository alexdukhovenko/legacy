#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Whisper API
"""

import logging
import asyncio
import os
import tempfile
from typing import Optional, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class AudioProcessorFixed:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.max_file_size = 20 * 1024 * 1024  # 20MB
        self.max_duration = 25 * 60  # 25 –º–∏–Ω—É—Ç
        
    async def process_audio_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            audio_file = await self._get_audio_file(update)
            if not audio_file:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if audio_file.file_size > self.max_file_size:
                return "–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 20MB."
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = await self._download_audio_file(audio_file, context)
            if not file_path:
                return "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ Whisper
                text = await self._process_with_whisper(file_path)
                if text:
                    return text
                
                # –ï—Å–ª–∏ Whisper –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                return await self._handle_whisper_error()
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error processing audio: {e}")
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}"
    
    async def _get_audio_file(self, update: Update):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if update.message.voice:
            return update.message.voice
        elif update.message.audio:
            return update.message.audio
        elif update.message.video_note:
            return update.message.video_note
        return None
    
    async def _download_audio_file(self, audio_file, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = tempfile.gettempdir()
            file_path = os.path.join(temp_dir, f"audio_{audio_file.file_id}.ogg")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(audio_file.file_id)
            await file.download_to_drive(file_path)
            
            return file_path
            
        except Exception as e:
            logger.error(f"Error downloading audio file: {e}")
            return None
    
    async def _process_with_whisper(self, file_path: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API"""
        try:
            from openai import AsyncOpenAI
            from config import OPENAI_API_KEY
            
            client = AsyncOpenAI(api_key=OPENAI_API_KEY)
            
            with open(file_path, "rb") as audio_file:
                response = await client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                )
            
            return response.text.strip()
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Whisper API error: {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "unsupported_country_region_territory" in error_msg:
                return None  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            elif "rate_limit" in error_msg.lower():
                return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Whisper API. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            elif "invalid_request" in error_msg.lower():
                return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Whisper API."
            else:
                return None  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    
    async def _handle_whisper_error(self) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ Whisper API –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"""
        return """
‚ùå **Whisper API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ**

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

1. **–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º** - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
2. **–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ** - –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ Telegram –∏ —Å–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç
3. **–†–∞–∑–±–µ–π –Ω–∞ —á–∞—Å—Ç–∏** - –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π:**
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `/test <–∑–∞–¥–∞—á–∞>` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üöÄ
        """
    
    async def process_text_fallback(self, text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback –¥–ª—è –∞—É–¥–∏–æ"""
        return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç: {text}"


# –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
async def test_audio_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    processor = AudioProcessorFixed()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ Whisper
    error_response = await processor._handle_whisper_error()
    print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ Whisper:")
    print(error_response)

if __name__ == "__main__":
    asyncio.run(test_audio_processor())
