#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from ai_processor import AIProcessor
from notion_integration import NotionPlanner
from mindmap_generator import MindmapGenerator

logger = logging.getLogger(__name__)

class SmartAgent:
    def __init__(self):
        self.ai_processor = AIProcessor()
        self.notion_planner = NotionPlanner()
        self.mindmap_generator = MindmapGenerator()
        
    async def analyze_and_process(self, text: str, user_id: int) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            analysis = await self._analyze_message_type(text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            result = await self._process_by_type(text, analysis, user_id)
            
            return {
                "success": True,
                "type": analysis["type"],
                "confidence": analysis["confidence"],
                "result": result,
                "message": self._generate_response_message(analysis, result)
            }
            
        except Exception as e:
            logger.error(f"Error in smart agent: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            }
    
    async def _analyze_message_type(self, text: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
        """
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø:

"{text}"

–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
1. "immediate_task" - —Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–ª–æ–≤–∞: —Å–µ–≥–æ–¥–Ω—è, —Å—Ä–æ—á–Ω–æ, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–µ –∑–∞–±—ã—Ç—å)
2. "weekly_task" - –∑–∞–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (—Å–ª–æ–≤–∞: –Ω–∞ –Ω–µ–¥–µ–ª–µ, –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, –ø–ª–∞–Ω–∏—Ä—É—é)
3. "long_term_task" - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ (—Å–ª–æ–≤–∞: –≤ –±—É–¥—É—â–µ–º, –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å, –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ)
4. "roadmap" - –¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞/–ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ (—Å–ª–æ–≤–∞: –ø–ª–∞–Ω, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —ç—Ç–∞–ø—ã, –ø—Ä–æ–µ–∫—Ç)
5. "thoughts" - –ø—Ä–æ—Å—Ç–æ –º—ã—Å–ª–∏/–∏–¥–µ–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—â–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è)
6. "chain_task" - –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Ä–æ–∂–¥–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
7. "expand_task" - –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Å–ª–æ–≤–∞: —Ä–∞–∑–≤–µ—Ä–Ω–∏, –¥–µ—Ç–∞–ª—å–Ω–æ, –ø–ª–∞–Ω, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å)

–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏:
- –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (1-10)
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high/medium/low)
- –ö–∞—Ç–µ–≥–æ—Ä–∏—é (work/learning/health/personal/general)
- –ù—É–∂–Ω–∞ –ª–∏ –¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ (true/false)
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∑–∞–¥–∞—á (–µ—Å–ª–∏ –µ—Å—Ç—å)

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "type": "—Ç–∏–ø_—Å–æ–æ–±—â–µ–Ω–∏—è",
    "confidence": 0.95,
    "urgency": 8,
    "priority": "high",
    "category": "work",
    "needs_roadmap": true,
    "subtasks_count": 3,
    "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"
}}
"""
        
        try:
            response = await self.ai_processor.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=500
            )
            
            analysis_text = response.choices[0].message.content.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            if analysis_text.startswith("```json"):
                analysis_text = analysis_text[7:-3]
            elif analysis_text.startswith("```"):
                analysis_text = analysis_text[3:-3]
            
            analysis = json.loads(analysis_text)
            return analysis
            
        except Exception as e:
            logger.error(f"Error analyzing message type: {e}")
            # Fallback –∞–Ω–∞–ª–∏–∑
            return {
                "type": "thoughts",
                "confidence": 0.5,
                "urgency": 5,
                "priority": "medium",
                "category": "general",
                "needs_roadmap": False,
                "subtasks_count": 0,
                "reasoning": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback"
            }
    
    async def _process_by_type(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        """
        message_type = analysis["type"]
        
        if message_type == "immediate_task":
            return await self._process_immediate_task(text, analysis, user_id)
        elif message_type == "weekly_task":
            return await self._process_weekly_task(text, analysis, user_id)
        elif message_type == "long_term_task":
            return await self._process_long_term_task(text, analysis, user_id)
        elif message_type == "roadmap":
            return await self._process_roadmap(text, analysis, user_id)
        elif message_type == "chain_task":
            return await self._process_chain_task(text, analysis, user_id)
        elif message_type == "expand_task":
            return await self._process_expand_task(text, analysis, user_id)
        else:  # thoughts
            return await self._process_thoughts(text, analysis, user_id)
    
    async def _process_immediate_task(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–æ—á–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            task_result = await self.notion_planner.create_task(
                title=f"üî• –°–†–û–ß–ù–û: {text[:50]}...",
                description=text,
                priority="high",
                category=analysis["category"],
                due_date=datetime.now().strftime("%Y-%m-%d"),
                estimated_time="1 —á–∞—Å"
            )
            
            return {
                "action": "immediate_task_created",
                "notion_success": task_result,
                "priority": "high",
                "due_date": "—Å–µ–≥–æ–¥–Ω—è"
            }
            
        except Exception as e:
            logger.error(f"Error processing immediate task: {e}")
            return {"action": "error", "error": str(e)}
    
    async def _process_weekly_task(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –Ω–µ–¥–µ–ª—é
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            due_date = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
            
            task_result = await self.notion_planner.create_task(
                title=f"üìÖ –ù–ï–î–ï–õ–Ø: {text[:50]}...",
                description=text,
                priority=analysis["priority"],
                category=analysis["category"],
                due_date=due_date,
                estimated_time="2-3 —á–∞—Å–∞"
            )
            
            return {
                "action": "weekly_task_created",
                "notion_success": task_result,
                "priority": analysis["priority"],
                "due_date": "–Ω–∞ –Ω–µ–¥–µ–ª–µ"
            }
            
        except Exception as e:
            logger.error(f"Error processing weekly task: {e}")
            return {"action": "error", "error": str(e)}
    
    async def _process_long_term_task(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –∑–∞–¥–∞—á—É
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            task_result = await self.notion_planner.create_task(
                title=f"üìö –î–û–õ–ì–û–°–†–û–ß–ù–û: {text[:50]}...",
                description=text,
                priority="low",
                category=analysis["category"],
                estimated_time="–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ"
            )
            
            return {
                "action": "long_term_task_created",
                "notion_success": task_result,
                "priority": "low",
                "due_date": "–±–µ–∑ —Å—Ä–æ–∫–∞"
            }
            
        except Exception as e:
            logger.error(f"Error processing long term task: {e}")
            return {"action": "error", "error": str(e)}
    
    async def _process_roadmap(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
            task_structure = await self.ai_processor.generate_task_structure(text)
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Ñ–∞–π–ª–µ
            roadmap_file = await self._create_roadmap_file(text, task_structure, user_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ Notion
            tasks_created = 0
            for task in task_structure.get("tasks", [])[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
                await self.notion_planner.create_task(
                    title=task.get("title", ""),
                    description=task.get("description", ""),
                    priority=task.get("priority", "medium"),
                    category=analysis["category"],
                    estimated_time=task.get("estimated_time", "1 —á–∞—Å")
                )
                tasks_created += 1
            
            return {
                "action": "roadmap_created",
                "file_path": roadmap_file,
                "tasks_created": tasks_created,
                "total_tasks": len(task_structure.get("tasks", []))
            }
            
        except Exception as e:
            logger.error(f"Error processing roadmap: {e}")
            return {"action": "error", "error": str(e)}
    
    async def _process_chain_task(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Ä–æ–∂–¥–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É –∑–∞–¥–∞—á
            chain_prompt = f"""
–°–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É –∑–∞–¥–∞—á –¥–ª—è: "{text}"

–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –∏ –ø–æ–¥–∑–∞–¥–∞—á–∏. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "main_task": "–≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞",
    "chain": [
        {{"step": 1, "task": "–ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞", "priority": "high", "estimated_time": "1 —á–∞—Å"}},
        {{"step": 2, "task": "–≤—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞", "priority": "medium", "estimated_time": "2 —á–∞—Å–∞"}},
        {{"step": 3, "task": "—Ç—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞", "priority": "medium", "estimated_time": "1 —á–∞—Å"}}
    ]
}}
"""
            
            response = await self.ai_processor.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": chain_prompt}],
                temperature=0.3,
                max_tokens=800
            )
            
            chain_text = response.choices[0].message.content.strip()
            if chain_text.startswith("```json"):
                chain_text = chain_text[7:-3]
            elif chain_text.startswith("```"):
                chain_text = chain_text[3:-3]
            
            chain_data = json.loads(chain_text)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ Notion
            tasks_created = 0
            for task in chain_data.get("chain", []):
                await self.notion_planner.create_task(
                    title=f"üîó –®–∞–≥ {task['step']}: {task['task']}",
                    description=f"–ß–∞—Å—Ç—å —Ü–µ–ø–æ—á–∫–∏: {chain_data.get('main_task', '')}",
                    priority=task.get("priority", "medium"),
                    category=analysis["category"],
                    estimated_time=task.get("estimated_time", "1 —á–∞—Å")
                )
                tasks_created += 1
            
            return {
                "action": "chain_tasks_created",
                "main_task": chain_data.get("main_task", ""),
                "tasks_created": tasks_created,
                "chain_length": len(chain_data.get("chain", []))
            }
            
        except Exception as e:
            logger.error(f"Error processing chain task: {e}")
            return {"action": "error", "error": str(e)}
    
    async def _process_expand_task(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
            detailed_plan = await self._create_detailed_plan(text, analysis)
            
            if not detailed_plan:
                return {"action": "error", "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω –≤ Notion –∫–∞–∫ –º–∞—Ç–µ—Ä–∏–∞–ª
            plan_result = await self.notion_planner.create_material_entry(
                title=f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω: {text[:50]}...",
                content=self._format_detailed_plan(detailed_plan),
                category=analysis["category"],
                tags=["–¥–µ—Ç–∞–ª—å–Ω—ã–π_–ø–ª–∞–Ω", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è_–∑–∞–¥–∞—á–∞"]
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ Notion
            tasks_created = 0
            for phase in detailed_plan.get("phases", []):
                for subtask in phase.get("subtasks", []):
                    task_result = await self.notion_planner.create_task(
                        title=f"{phase['name']}: {subtask['title']}",
                        description=subtask['description'],
                        priority=subtask.get('priority', 'medium'),
                        category=analysis["category"],
                        estimated_time=subtask.get('estimated_time', '1 —á–∞—Å')
                    )
                    if task_result:
                        tasks_created += 1
            
            return {
                "action": "detailed_plan_created",
                "plan_created": plan_result,
                "tasks_created": tasks_created,
                "phases_count": len(detailed_plan.get("phases", [])),
                "plan_data": detailed_plan
            }
            
        except Exception as e:
            logger.error(f"Error processing expand task: {e}")
            return {"action": "error", "error": str(e)}

    async def _process_thoughts(self, text: str, analysis: Dict[str, Any], user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –º—ã—Å–ª–∏/–∏–¥–µ–∏
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            task_structure = await self.ai_processor.generate_task_structure(text)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion
            material_result = await self.notion_planner.create_material_entry(
                title=f"üí≠ –ú—ã—Å–ª–∏: {text[:50]}...",
                content=text,
                category=analysis["category"],
                tags=["–º—ã—Å–ª–∏", "–∏–¥–µ–∏"]
            )
            
            return {
                "action": "thoughts_structured",
                "material_created": material_result,
                "tasks_found": len(task_structure.get("tasks", [])),
                "structure": task_structure
            }
            
        except Exception as e:
            logger.error(f"Error processing thoughts: {e}")
            return {"action": "error", "error": str(e)}
    
    async def _create_roadmap_file(self, text: str, task_structure: Dict[str, Any], user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
        """
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"roadmap_{user_id}_{timestamp}.md"
            filepath = os.path.join("outputs", filename)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = f"""# –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞
*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime("%Y-%m-%d %H:%M")}*

## –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
{text}

## –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å
{task_structure.get('main_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

## –ó–∞–¥–∞—á–∏
"""
            
            for i, task in enumerate(task_structure.get("tasks", []), 1):
                priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.get("priority", "medium"), "üü°")
                content += f"""
### {i}. {priority_emoji} {task.get('title', f'–ó–∞–¥–∞—á–∞ {i}')}
- **–û–ø–∏—Å–∞–Ω–∏–µ:** {task.get('description', '')}
- **–í—Ä–µ–º—è:** {task.get('estimated_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {task.get('category', '–û–±—â–µ–µ')}
"""
            
            if task_structure.get("timeline"):
                content += f"\n## –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏\n{task_structure['timeline']}\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return filepath
            
        except Exception as e:
            logger.error(f"Error creating roadmap file: {e}")
            return ""
    
    async def _create_detailed_plan(self, text: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑ –∑–∞–¥–∞—á–∏
        """
        try:
            expansion_prompt = f"""
            –†–∞–∑–≤–µ—Ä–Ω–∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π, —ç—Ç–∞–ø–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏.

            –ó–∞–¥–∞—á–∞: "{text}"

            –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
            1. –¶–µ–ª—å –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            2. –°—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            3. –î–µ—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
            4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
            5. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            6. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
            7. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞

            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
            {{
                "goal": "—á–µ—Ç–∫–∞—è_—Ü–µ–ª—å_–∏_–æ–∂–∏–¥–∞–µ–º—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "strategy": "–æ–±—â–∞—è_—Å—Ç—Ä–∞—Ç–µ–≥–∏—è_–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è_—Ü–µ–ª–∏",
                "phases": [
                    {{
                        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ_—ç—Ç–∞–ø–∞",
                        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ_—ç—Ç–∞–ø–∞",
                        "duration": "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ_—Ä–∞–º–∫–∏",
                        "subtasks": [
                            {{
                                "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–¥–∑–∞–¥–∞—á–∏",
                                "description": "–æ–ø–∏—Å–∞–Ω–∏–µ_–ø–æ–¥–∑–∞–¥–∞—á–∏",
                                "estimated_time": "–æ—Ü–µ–Ω–∫–∞_–≤—Ä–µ–º–µ–Ω–∏",
                                "priority": "high/medium/low"
                            }}
                        ]
                    }}
                ],
                "resources": ["—Å–ø–∏—Å–æ–∫_–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö_—Ä–µ—Å—É—Ä—Å–æ–≤"],
                "risks": [
                    {{
                        "risk": "–æ–ø–∏—Å–∞–Ω–∏–µ_—Ä–∏—Å–∫–∞",
                        "mitigation": "—Å–ø–æ—Å–æ–±_–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏"
                    }}
                ],
                "success_criteria": ["–∫—Ä–∏—Ç–µ—Ä–∏–∏_—É—Å–ø–µ—à–Ω–æ–≥–æ_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"]
            }}
            """
            
            response = await self.ai_processor.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": expansion_prompt}],
                temperature=0.3,
                max_tokens=1500
            )
            
            expansion_text = response.choices[0].message.content.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            if expansion_text.startswith("```json"):
                expansion_text = expansion_text[7:-3]
            elif expansion_text.startswith("```"):
                expansion_text = expansion_text[3:-3]
            
            expansion_data = json.loads(expansion_text)
            return expansion_data
            
        except Exception as e:
            logger.error(f"Error creating detailed plan: {e}")
            return None
    
    def _format_detailed_plan(self, plan_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if not plan_data:
            return "–ü–ª–∞–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        content = f"""**–¶–µ–ª—å:** {plan_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {plan_data.get('strategy', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

**–≠—Ç–∞–ø—ã:**
{self._format_phases(plan_data.get('phases', []))}

**–†–µ—Å—É—Ä—Å—ã:** {', '.join(plan_data.get('resources', []))}

**–†–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏:**
{self._format_risks(plan_data.get('risks', []))}

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**
{self._format_success_criteria(plan_data.get('success_criteria', []))}
"""
        return content
    
    def _format_phases(self, phases: list) -> str:
        """Format phases for display"""
        if not phases:
            return "–≠—Ç–∞–ø—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        formatted = ""
        for i, phase in enumerate(phases, 1):
            formatted += f"\n**{i}. {phase.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}** ({phase.get('duration', '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫')})\n"
            formatted += f"{phase.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            
            subtasks = phase.get('subtasks', [])
            if subtasks:
                formatted += "–ü–æ–¥–∑–∞–¥–∞—á–∏:\n"
                for j, subtask in enumerate(subtasks, 1):
                    formatted += f"  {j}. {subtask.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({subtask.get('estimated_time', '–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏')})\n"
        
        return formatted

    def _format_risks(self, risks: list) -> str:
        """Format risks for display"""
        if not risks:
            return "–†–∏—Å–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        formatted = ""
        for i, risk in enumerate(risks, 1):
            formatted += f"{i}. **{risk.get('risk', '–ù–µ —É–∫–∞–∑–∞–Ω')}**\n"
            formatted += f"   –°–ø–æ—Å–æ–± –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏: {risk.get('mitigation', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        
        return formatted

    def _format_success_criteria(self, criteria: list) -> str:
        """Format success criteria for display"""
        if not criteria:
            return "–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        formatted = ""
        for i, criterion in enumerate(criteria, 1):
            formatted += f"{i}. {criterion}\n"
        
        return formatted
    
    def _generate_response_message(self, analysis: Dict[str, Any], result: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        message_type = analysis["type"]
        action = result.get("action", "")
        
        if message_type == "immediate_task":
            return f"üî• **–°–†–û–ß–ù–ê–Ø –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê!**\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å!"
        
        elif message_type == "weekly_task":
            return f"üìÖ **–ó–ê–î–ê–ß–ê –ù–ê –ù–ï–î–ï–õ–Æ –°–û–ó–î–ê–ù–ê!**\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion —Å–æ —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é."
        
        elif message_type == "long_term_task":
            return f"üìö **–î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê!**\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion –±–µ–∑ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ."
        
        elif message_type == "roadmap":
            tasks_created = result.get("tasks_created", 0)
            total_tasks = result.get("total_tasks", 0)
            return f"üó∫Ô∏è **–î–û–†–û–ñ–ù–ê–Ø –ö–ê–†–¢–ê –°–û–ó–î–ê–ù–ê!**\n\n–°–æ–∑–¥–∞–Ω–æ {tasks_created} –∏–∑ {total_tasks} –∑–∞–¥–∞—á –≤ Notion. –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª."
        
        elif message_type == "chain_task":
            tasks_created = result.get("tasks_created", 0)
            chain_length = result.get("chain_length", 0)
            main_task = result.get("main_task", "")
            return f"üîó **–¶–ï–ü–û–ß–ö–ê –ó–ê–î–ê–ß –°–û–ó–î–ê–ù–ê!**\n\n–ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {main_task}\n–°–æ–∑–¥–∞–Ω–æ {tasks_created} –∑–∞–¥–∞—á –≤ —Ü–µ–ø–æ—á–∫–µ. –í—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Notion."
        
        elif message_type == "expand_task":
            tasks_created = result.get("tasks_created", 0)
            phases_count = result.get("phases_count", 0)
            return f"üìã **–î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –°–û–ó–î–ê–ù!**\n\n–ó–∞–¥–∞—á–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –≤ {phases_count} —ç—Ç–∞–ø–æ–≤ —Å {tasks_created} –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏. –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Notion –∫–∞–∫ –º–∞—Ç–µ—Ä–∏–∞–ª, –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–¥–∞—á–∏."
        
        else:  # thoughts
            tasks_found = result.get("tasks_found", 0)
            if tasks_found > 0:
                return f"üí≠ **–ú–´–°–õ–ò –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–´!**\n\n–ù–∞–π–¥–µ–Ω–æ {tasks_found} –∑–∞–¥–∞—á –≤ —Ç–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö. –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Notion."
            else:
                return f"üí≠ **–ú–´–°–õ–ò –ó–ê–ü–ò–°–ê–ù–´!**\n\n–¢–≤–æ–∏ –º—ã—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Notion –∫–∞–∫ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
