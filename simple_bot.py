#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –°–î–í–ì
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
"""

import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import TELEGRAM_BOT_TOKEN
from audio_processor_fixed import AudioProcessorFixed
from task_router import TaskRouter, TaskType

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleTelegramBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –°–î–í–ì"""
    
    def __init__(self):
        self.audio_processor = AudioProcessorFixed()
        self.task_router = TaskRouter()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        welcome_message = """
ü§ñ *–ü—Ä–æ—Å—Ç–æ–π AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –°–î–í–ì*

*–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏:*

üî• **–°–†–û–ß–ù–´–ï** ‚Üí Apple Reminders (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)
üìÖ **–°–û–ë–´–¢–ò–Ø** ‚Üí Apple Calendar (—Å –≤—Ä–µ–º–µ–Ω–µ–º)
üîÑ **–ü–†–ò–í–´–ß–ö–ò** ‚Üí Apple Reminders (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
üìã **–ü–†–û–ï–ö–¢–´** ‚Üí Notion (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏)
‚úÖ **–†–£–¢–ò–ù–ê** ‚Üí Apple Reminders (–Ω–∞ –∑–∞–≤—Ç—Ä–∞)
üí° **–ò–î–ï–ò** ‚Üí Notion (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)

*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å:*
‚Ä¢ –¢–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –õ—é–±—É—é –∑–∞–¥–∞—á—É, –º—ã—Å–ª—å, –∏–¥–µ—é
‚Ä¢ –Ø —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—é, –∫—É–¥–∞ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–°—Ä–æ—á–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ" ‚Üí Apple Reminders
‚Ä¢ "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00" ‚Üí Apple Calendar  
‚Ä¢ "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–∏—Ç—å –≤–æ–¥—É" ‚Üí Apple Reminders (–ø—Ä–∏–≤—ã—á–∫–∞)
‚Ä¢ "–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç" ‚Üí Notion (–ø—Ä–æ–µ–∫—Ç)
‚Ä¢ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ" ‚Üí Apple Reminders (—Ä—É—Ç–∏–Ω–∞)

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üöÄ
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_message = """
üìö *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç*

*üéØ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –¥–ª—è –°–î–í–ì:*
‚Ä¢ –û–¥–∏–Ω –±–æ—Ç - –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –º–µ–Ω—é

*üì± –ö—É–¥–∞ –∏–¥—É—Ç –∑–∞–¥–∞—á–∏:*

**Apple Reminders:**
‚Ä¢ üî• –°—Ä–æ—á–Ω—ã–µ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)
‚Ä¢ üîÑ –ü—Ä–∏–≤—ã—á–∫–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
‚Ä¢ ‚úÖ –†—É—Ç–∏–Ω–∞ (–Ω–∞ –∑–∞–≤—Ç—Ä–∞)

**Apple Calendar:**
‚Ä¢ üìÖ –°–æ–±—ã—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
‚Ä¢ üìû –í—Å—Ç—Ä–µ—á–∏ –∏ –∑–≤–æ–Ω–∫–∏

**Notion:**
‚Ä¢ üìã –ü—Ä–æ–µ–∫—Ç—ã (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
‚Ä¢ üí° –ò–¥–µ–∏ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)

*üé§ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:*
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

*‚ö° –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*
‚Ä¢ "—Å—Ä–æ—á–Ω–æ", "—Å–µ–≥–æ–¥–Ω—è" ‚Üí –°—Ä–æ—á–Ω—ã–µ
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞", "–≤—Ä–µ–º—è" ‚Üí –ö–∞–ª–µ–Ω–¥–∞—Ä—å
‚Ä¢ "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" ‚Üí –ü—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ "—Å–æ–∑–¥–∞—Ç—å", "–ø—Ä–æ–µ–∫—Ç" ‚Üí Notion
‚Ä¢ "–∫—É–ø–∏—Ç—å", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å" ‚Üí –†—É—Ç–∏–Ω–∞

–ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏ - —è —Ä–∞–∑–±–µ—Ä—É—Å—å! üéØ
        """
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def handle_audio_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming audio/voice messages"""
        try:
            # Send processing message
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # Extract text from audio
            text = await self.audio_processor.process_audio_message(update, context)
            
            if not text:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–π —Ä–µ—á—å—é.")
                return
            
            # Check if text is an error message
            if any(text.startswith(error) for error in [
                "–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π", 
                "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç", "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", "Whisper API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            ]):
                await processing_msg.edit_text(text, parse_mode='Markdown')
                return
            
            # Update processing message
            await processing_msg.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –∑–∞–¥–∞—á—É...")
            
            # Route the task
            user_id = update.effective_user.id
            result = await self.task_router.route_task(text, user_id)
            
            if result["success"]:
                # Show result
                service_emoji = {
                    "Apple Reminders": "üì±",
                    "Apple Calendar": "üìÖ", 
                    "Notion": "üìã"
                }
                
                emoji = service_emoji.get(result["service"], "‚úÖ")
                message = f"{emoji} {result['message']}"
                
                await processing_msg.edit_text(message, parse_mode='Markdown')
            else:
                await processing_msg.edit_text(f"‚ùå {result['message']}")
                
        except Exception as e:
            logger.error(f"Error handling audio message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming text messages"""
        try:
            text = update.message.text
            
            # Skip if it's a command
            if text.startswith('/'):
                return
            
            # Send processing message
            processing_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –∑–∞–¥–∞—á—É...")
            
            # Route the task
            user_id = update.effective_user.id
            result = await self.task_router.route_task(text, user_id)
            
            if result["success"]:
                # Show result
                service_emoji = {
                    "Apple Reminders": "üì±",
                    "Apple Calendar": "üìÖ", 
                    "Notion": "üìã"
                }
                
                emoji = service_emoji.get(result["service"], "‚úÖ")
                message = f"{emoji} {result['message']}"
                
                await processing_msg.edit_text(message, parse_mode='Markdown')
            else:
                await processing_msg.edit_text(f"‚ùå {result['message']}")
                
        except Exception as e:
            logger.error(f"Error handling text message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Test command to show task routing"""
        if not context.args:
            await update.message.reply_text(
                "üß™ *–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/test <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/test –°—Ä–æ—á–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`\n"
                "‚Ä¢ `/test –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00`\n"
                "‚Ä¢ `/test –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–∏—Ç—å –≤–æ–¥—É`\n"
                "‚Ä¢ `/test –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç`\n"
                "‚Ä¢ `/test –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args)
        user_id = update.effective_user.id
        
        # Route the task
        result = await self.task_router.route_task(text, user_id)
        
        if result["success"]:
            message = f"""
üß™ *–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏*

**–¢–µ–∫—Å—Ç:** {text}
**–¢–∏–ø:** {result['task_type']}
**–°–µ—Ä–≤–∏—Å:** {result['service']}

{result['message']}
            """
            await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå {result['message']}")
    
    def run(self):
        """Run the bot"""
        # Create application
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("test", self.test_command))
        
        # Handle audio and voice messages
        application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, self.handle_audio_message))
        
        # Handle text messages
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # Start the bot
        logger.info("Starting Simple Telegram Bot...")
        application.run_polling()

if __name__ == "__main__":
    bot = SimpleTelegramBot()
    bot.run()
