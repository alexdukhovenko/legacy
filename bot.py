import logging
import asyncio
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from config import TELEGRAM_BOT_TOKEN
from audio_processor import AudioProcessor
from ai_processor import AIProcessor
from mindmap_generator import MindmapGenerator
from planner_system import PersonalPlanner
from smart_agent import SmartAgent

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramAIAssistant:
    def __init__(self):
        self.audio_processor = AudioProcessor()
        self.ai_processor = AIProcessor()
        self.mindmap_generator = MindmapGenerator()
        self.planner = PersonalPlanner()
        self.smart_agent = SmartAgent()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        welcome_message = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–º–Ω—ã–π AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç!*

*–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏:*
üî• **–°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏** ‚Üí –¥–æ–±–∞–≤–ª—è—é –≤ Notion –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üìÖ **–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é** ‚Üí –ø–ª–∞–Ω–∏—Ä—É—é –Ω–∞ –Ω–µ–¥–µ–ª—é  
üìö **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–ª–∞–Ω—ã** ‚Üí —Å–æ—Ö—Ä–∞–Ω—è—é –±–µ–∑ —Å—Ä–æ–∫–∞
üó∫Ô∏è **–î–æ—Ä–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã** ‚Üí —Å–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã —Å –ø–ª–∞–Ω–∞–º–∏
üîó **–¶–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á** ‚Üí —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —ç—Ç–∞–ø—ã
üí≠ **–ú—ã—Å–ª–∏ –∏ –∏–¥–µ–∏** ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é

*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ:*
‚Ä¢ –¢–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –õ—é–±—ã–µ –º—ã—Å–ª–∏, –∑–∞–¥–∞—á–∏, –ø–ª–∞–Ω—ã
‚Ä¢ –Ø —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å!

*–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è* üöÄ
        """
        
        # Create inline keyboard with main menu
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–Ω–µ—Ä", callback_data="menu_planner")],
            [InlineKeyboardButton("üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_schedule")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="menu_tasks")],
            [InlineKeyboardButton("üìö –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="menu_materials")],
            [InlineKeyboardButton("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_message = """
üìö *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*ü§ñ –£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:*
‚Ä¢ üî• –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Notion –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Üí –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é  
‚Ä¢ üìö –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–ª–∞–Ω—ã ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–µ–∑ —Å—Ä–æ–∫–∞
‚Ä¢ üó∫Ô∏è –î–æ—Ä–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Üí —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã —Å –ø–ª–∞–Ω–∞–º–∏
‚Ä¢ üîó –¶–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á ‚Üí —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —ç—Ç–∞–ø—ã
‚Ä¢ üí≠ –ú—ã—Å–ª–∏ –∏ –∏–¥–µ–∏ ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç

*üìã –ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/tasks` - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Notion
‚Ä¢ `/expand <–∑–∞–¥–∞—á–∞>` - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á—É –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
‚Ä¢ `/schedule` - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

*üé§ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ:*
‚Ä¢ OGG (–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram)
‚Ä¢ MP3, WAV, M4A

*‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å:*
‚Ä¢ –¢–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –õ—é–±—ã–µ –º—ã—Å–ª–∏, –∑–∞–¥–∞—á–∏, –ø–ª–∞–Ω—ã
‚Ä¢ –Ø —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å!

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéØ
        """
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command"""
        status_message = """
üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

‚úÖ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω
‚úÖ Audio Processor: –ì–æ—Ç–æ–≤
‚úÖ OpenAI Integration: –ì–æ—Ç–æ–≤
‚úÖ Mindmap Generator: –ì–æ—Ç–æ–≤
‚úÖ Personal Planner: –ì–æ—Ç–æ–≤
‚úÖ Notion Integration: –ì–æ—Ç–æ–≤

*–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
‚Ä¢ –ú–æ–¥–µ–ª—å OpenAI: GPT-3.5-turbo
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: 5 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: OGG, MP3, WAV, M4A
‚Ä¢ Notion API: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ
        """
        await update.message.reply_text(status_message, parse_mode='Markdown')
    
    async def planner_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /planner command"""
        planner_message = """
üìÖ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω–Ω–µ—Ä*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∑–∞–¥–∞—á
‚Ä¢ üóìÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üìö –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
‚Ä¢ üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion

*–ö–æ–º–∞–Ω–¥—ã:*
/planner - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
/schedule - —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
/materials - –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ
2. –í—ã–±–µ—Ä–∏ "üìÖ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –≤ Notion"
3. –ü–æ–ª—É—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ Notion

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º! üìä
        """
        await update.message.reply_text(planner_message, parse_mode='Markdown')
    
    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /schedule command"""
        try:
            await update.message.reply_text("üóìÔ∏è –°–æ–∑–¥–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å...")
            
            # Create daily schedule
            schedule_result = await self.planner.create_daily_schedule()
            
            if schedule_result.get("success"):
                message = f"‚úÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!*\n\n"
                message += f"üìÖ *–î–∞—Ç–∞:* {schedule_result.get('date', '')}\n"
                message += f"üìã *–í—Å–µ–≥–æ –∑–∞–¥–∞—á:* {schedule_result.get('total_tasks', 0)}\n\n"
                
                time_blocks = schedule_result.get("time_blocks", [])
                for block in time_blocks:
                    message += f"‚è∞ *{block.get('time', '')}*\n"
                    message += f"   {block.get('title', '')}\n"
                    message += f"   –ó–∞–¥–∞—á: {len(block.get('tasks', []))}\n\n"
                
                message += f"üîó *–ü—Ä–æ–≤–µ—Ä—å Notion –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!*"
                
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_result.get('error', '')}")
                
        except Exception as e:
            logger.error(f"Error creating schedule: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /tasks command"""
        try:
            await update.message.reply_text("üìã –ü–æ–ª—É—á–∞—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
            
            # Get priority tasks
            tasks = await self.planner.get_priority_tasks(limit=10)
            
            if tasks:
                message = "üìã *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
                for i, task in enumerate(tasks, 1):
                    priority_emoji = {"üî¥ High": "üî¥", "üü° Medium": "üü°", "üü¢ Low": "üü¢"}.get(task.get("priority", "üü° Medium"), "üü°")
                    message += f"{priority_emoji} *{i}. {task.get('title', '')}*\n"
                    message += f"   üìÇ {task.get('category', '')}\n"
                    message += f"   ‚è±Ô∏è {task.get('estimated_time', '')}\n"
                    if task.get('due_date'):
                        message += f"   üìÖ {task.get('due_date')}\n"
                    message += "\n"
                
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ø–ª–∞–Ω!")
                
        except Exception as e:
            logger.error(f"Error getting tasks: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

    async def expand_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /expand command for detailed task planning"""
        try:
            # Get the task description from command arguments
            if not context.args:
                await update.message.reply_text(
                    "üìã *–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω*\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/expand <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>`\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `/expand –°–æ–∑–¥–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`\n\n"
                    "–Ø —Ä–∞–∑–≤–µ—Ä–Ω—É —Ç–≤–æ—é –∑–∞–¥–∞—á—É –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å:\n"
                    "‚Ä¢ –¶–µ–ª—å—é –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π\n"
                    "‚Ä¢ –≠—Ç–∞–ø–∞–º–∏ –∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏\n"
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏\n"
                    "‚Ä¢ –†–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Ä–∏—Å–∫–∞–º–∏\n"
                    "‚Ä¢ –ö—Ä–∏—Ç–µ—Ä–∏—è–º–∏ —É—Å–ø–µ—Ö–∞",
                    parse_mode='Markdown'
                )
                return
            
            task_description = " ".join(context.args)
            
            # Use smart agent to expand the task
            result = await self.smart_agent.analyze_and_process(f"—Ä–∞–∑–≤–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω–æ: {task_description}", update.effective_user.id)
            
            if result["success"]:
                await update.message.reply_text(result["message"], parse_mode='Markdown')
                
                # If there's detailed plan data, show it
                if result.get("result", {}).get("plan_data"):
                    plan_data = result["result"]["plan_data"]
                    plan_message = f"""
üìã **–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω:**

**üéØ –¶–µ–ª—å:** {plan_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

**üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {plan_data.get('strategy', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

**üìä –≠—Ç–∞–ø—ã:** {len(plan_data.get('phases', []))} —ç—Ç–∞–ø–æ–≤
**‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∏:** {result['result'].get('tasks_created', 0)} –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ

**üìö –†–µ—Å—É—Ä—Å—ã:** {', '.join(plan_data.get('resources', [])[:3])}{'...' if len(plan_data.get('resources', [])) > 3 else ''}

**‚ö†Ô∏è –†–∏—Å–∫–∏:** {len(plan_data.get('risks', []))} –≤—ã—è–≤–ª–µ–Ω–æ
**üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:** {len(plan_data.get('success_criteria', []))} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ

–í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Notion, –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –º–∞—Ç–µ—Ä–∏–∞–ª!
                    """
                    await update.message.reply_text(plan_message, parse_mode='Markdown')
            else:
                await update.message.reply_text(f"‚ùå {result.get('message', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞')}")
                
        except Exception as e:
            logger.error(f"Error in expand command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.")
    
    async def handle_audio_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming audio/voice messages with smart agent"""
        try:
            # Send processing message
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # Extract text from audio
            text = await self.audio_processor.process_audio_message(update, context)
            
            if not text:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–π —Ä–µ—á—å—é.")
                return
            
            # Check if text is an error message
            if text.startswith("–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ") or text.startswith("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π") or text.startswith("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç") or text.startswith("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"):
                await processing_msg.edit_text(f"‚ùå {text}")
                return
            
            # Update processing message
            await processing_msg.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # Use smart agent to analyze and process
            user_id = update.effective_user.id
            result = await self.smart_agent.analyze_and_process(text, user_id)
            
            if result["success"]:
                # Send the response message
                await processing_msg.edit_text(result["message"], parse_mode='Markdown')
                
                # If roadmap was created, send the file
                if result["type"] == "roadmap" and result["result"].get("file_path"):
                    file_path = result["result"]["file_path"]
                    if os.path.exists(file_path):
                        with open(file_path, 'rb') as doc:
                            await update.message.reply_document(
                                doc, 
                                caption="üó∫Ô∏è *–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞*",
                                parse_mode='Markdown'
                            )
                        # Clean up file
                        os.remove(file_path)
                
                # If thoughts were structured, show the structure
                elif result["type"] == "thoughts" and result["result"].get("structure"):
                    structure = result["result"]["structure"]
                    await self._send_task_structure(update, structure)
                    
            else:
                await processing_msg.edit_text(f"‚ùå {result['message']}")
            
        except Exception as e:
            logger.error(f"Error handling audio message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    
    async def _send_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                          text: str, task_structure: dict, mindmap_data: dict, summary: str):
        """Send all results to user"""
        try:
            # Send extracted text
            await update.message.reply_text(f"üìù *–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{text}", parse_mode='Markdown')
            
            # Send summary
            await update.message.reply_text(f"üìã *–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:*\n\n{summary}", parse_mode='Markdown')
            
            # Send task structure
            await self._send_task_structure(update, task_structure)
            
            # Generate and send mindmap
            await self._send_mindmap(update, context, mindmap_data)
            
        except Exception as e:
            logger.error(f"Error sending results: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    async def _send_task_structure(self, update: Update, task_structure: dict):
        """Send task structure as formatted message"""
        try:
            message = f"üìã *–°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ü–õ–ê–ù –ó–ê–î–ê–ß*\n\n"
            message += f"üéØ *–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å:* {task_structure.get('main_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            
            tasks = task_structure.get('tasks', [])
            for i, task in enumerate(tasks, 1):
                priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.get('priority', 'medium'), "üü°")
                message += f"{priority_emoji} *{i}. {task.get('title', f'–ó–∞–¥–∞—á–∞ {i}')}*\n"
                message += f"   üìù {task.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                message += f"   ‚è±Ô∏è –í—Ä–µ–º—è: {task.get('estimated_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                message += f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.get('category', '–û–±—â–µ–µ')}\n\n"
            
            categories = task_structure.get('categories', [])
            if categories:
                message += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(categories)}\n"
            
            timeline = task_structure.get('timeline', '')
            if timeline:
                message += f"‚è∞ *–û–±—â–µ–µ –≤—Ä–µ–º—è:* {timeline}\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error sending task structure: {e}")
    
    async def _send_mindmap(self, update: Update, context: ContextTypes.DEFAULT_TYPE, mindmap_data: dict):
        """Generate and send mindmap"""
        try:
            # Generate mindmap image
            image_path = self.mindmap_generator.generate_mindmap_image(mindmap_data)
            
            if image_path and os.path.exists(image_path):
                # Send text file as document
                with open(image_path, 'rb') as doc:
                    await update.message.reply_document(doc, caption="üó∫Ô∏è *–ú–∞–π–Ω–¥–º—ç–ø (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)*", parse_mode='Markdown')
                
                # Clean up file
                os.remove(image_path)
            else:
                # Send text mindmap as fallback
                text_mindmap = self.mindmap_generator.generate_mindmap_text(mindmap_data)
                await update.message.reply_text(text_mindmap, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"Error sending mindmap: {e}")
            # Send text mindmap as fallback
            text_mindmap = self.mindmap_generator.generate_mindmap_text(mindmap_data)
            await update.message.reply_text(text_mindmap, parse_mode='Markdown')
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages with smart agent"""
        text = update.message.text
        
        if text.startswith('/'):
            return  # Commands are handled separately
        
        # Store the text in context for callback processing
        context.user_data['last_text'] = text
        
        # Show processing message
        processing_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # Use smart agent to analyze and process
            user_id = update.effective_user.id
            result = await self.smart_agent.analyze_and_process(text, user_id)
            
            if result["success"]:
                # Send the response message
                await processing_msg.edit_text(result["message"], parse_mode='Markdown')
                
                # If roadmap was created, send the file
                if result["type"] == "roadmap" and result["result"].get("file_path"):
                    file_path = result["result"]["file_path"]
                    if os.path.exists(file_path):
                        with open(file_path, 'rb') as doc:
                            await update.message.reply_document(
                                doc, 
                                caption="üó∫Ô∏è *–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞*",
                                parse_mode='Markdown'
                            )
                        # Clean up file
                        os.remove(file_path)
                
                # If thoughts were structured, show the structure
                elif result["type"] == "thoughts" and result["result"].get("structure"):
                    structure = result["result"]["structure"]
                    await self._send_task_structure(update, structure)
                    
            else:
                await processing_msg.edit_text(f"‚ùå {result['message']}")
                
        except Exception as e:
            logger.error(f"Error in smart agent processing: {e}")
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        try:
            # Handle main menu callbacks
            if query.data == "menu_planner":
                await self._show_planner_menu(query, context)
            elif query.data == "menu_schedule":
                await self._handle_schedule_menu(query, context)
            elif query.data == "menu_tasks":
                await self._handle_tasks_menu(query, context)
            elif query.data == "menu_materials":
                await self._show_materials_menu(query, context)
            elif query.data == "menu_status":
                await self._show_status_menu(query, context)
            elif query.data == "menu_help":
                await self._show_help_menu(query, context)
            elif query.data == "back_to_main":
                await self._show_main_menu(query, context)
            
            # Handle text processing callbacks
            elif query.data in ["process_text", "mindmap_text", "create_plan", "sort_material"]:
                # Get the stored text from user data
                text = context.user_data.get('last_text')
                if not text:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.")
                    return
                
                if query.data == "process_text":
                    # Show processing message
                    await query.edit_message_text("ü§ñ –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –∑–∞–¥–∞—á...")
                    
                    # Process the text
                    await self._process_text_direct(query, context, text)
                    
                elif query.data == "mindmap_text":
                    # Show processing message
                    await query.edit_message_text("üó∫Ô∏è –°–æ–∑–¥–∞—é –º–∞–π–Ω–¥–º—ç–ø...")
                    
                    # Process only mindmap
                    await self._process_mindmap_direct(query, context, text)
                    
                elif query.data == "create_plan":
                    # Show processing message
                    await query.edit_message_text("üìÖ –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –≤ Notion...")
                    
                    # Create smart plan with Notion integration
                    await self._create_notion_plan(query, context, text)
                    
                elif query.data == "sort_material":
                    # Show processing message
                    await query.edit_message_text("üìö –°–æ—Ä—Ç–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª...")
                    
                    # Sort material
                    await self._sort_material_direct(query, context, text)
                
        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def _process_text_message(self, message, context: ContextTypes.DEFAULT_TYPE):
        """Process text message similar to audio"""
        try:
            text = message.text
            
            # Generate task structure
            task_structure = await self.ai_processor.generate_task_structure(text)
            
            # Generate mindmap
            mindmap_data = await self.ai_processor.generate_mindmap_data(text)
            
            # Generate summary
            summary = await self.ai_processor.generate_summary(text)
            
            # Send results
            await self._send_results(message, context, text, task_structure, mindmap_data, summary)
            
        except Exception as e:
            logger.error(f"Error processing text message: {e}")
    
    async def _process_mindmap_only(self, message, context: ContextTypes.DEFAULT_TYPE):
        """Process text message for mindmap only"""
        try:
            text = message.text
            
            # Generate mindmap
            mindmap_data = await self.ai_processor.generate_mindmap_data(text)
            
            # Send only mindmap
            await self._send_mindmap(message, context, mindmap_data)
            
        except Exception as e:
            logger.error(f"Error processing mindmap: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–π–Ω–¥–º—ç–ø–∞.")
    
    async def _process_text_direct(self, query, context: ContextTypes.DEFAULT_TYPE, text: str):
        """Process text directly from callback"""
        try:
            # Generate task structure
            task_structure = await self.ai_processor.generate_task_structure(text)
            
            # Generate mindmap
            mindmap_data = await self.ai_processor.generate_mindmap_data(text)
            
            # Generate summary
            summary = await self.ai_processor.generate_summary(text)
            
            # Send results
            await self._send_results_direct(query, context, text, task_structure, mindmap_data, summary)
            
        except Exception as e:
            logger.error(f"Error processing text: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á.")
    
    async def _process_mindmap_direct(self, query, context: ContextTypes.DEFAULT_TYPE, text: str):
        """Process text for mindmap only from callback"""
        try:
            # Generate mindmap
            mindmap_data = await self.ai_processor.generate_mindmap_data(text)
            
            # Send only mindmap
            await self._send_mindmap_direct(query, context, mindmap_data)
            
        except Exception as e:
            logger.error(f"Error processing mindmap: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–π–Ω–¥–º—ç–ø–∞.")
    
    async def _send_results_direct(self, query, context: ContextTypes.DEFAULT_TYPE, 
                                  text: str, task_structure: dict, mindmap_data: dict, summary: str):
        """Send all results to user from callback"""
        try:
            # Send extracted text
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"üìù *–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{text}",
                parse_mode='Markdown'
            )
            
            # Send summary
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"üìã *–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:*\n\n{summary}",
                parse_mode='Markdown'
            )
            
            # Send task structure
            await self._send_task_structure_direct(query, context, task_structure)
            
            # Generate and send mindmap
            await self._send_mindmap_direct(query, context, mindmap_data)
            
        except Exception as e:
            logger.error(f"Error sending results: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    async def _send_task_structure_direct(self, query, context: ContextTypes.DEFAULT_TYPE, task_structure: dict):
        """Send task structure as formatted message from callback"""
        try:
            message = f"üìã *–°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ü–õ–ê–ù –ó–ê–î–ê–ß*\n\n"
            message += f"üéØ *–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å:* {task_structure.get('main_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            
            tasks = task_structure.get('tasks', [])
            for i, task in enumerate(tasks, 1):
                priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.get('priority', 'medium'), "üü°")
                message += f"{priority_emoji} *{i}. {task.get('title', f'–ó–∞–¥–∞—á–∞ {i}')}*\n"
                message += f"   üìù {task.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                message += f"   ‚è±Ô∏è –í—Ä–µ–º—è: {task.get('estimated_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                message += f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.get('category', '–û–±—â–µ–µ')}\n\n"
            
            categories = task_structure.get('categories', [])
            if categories:
                message += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(categories)}\n"
            
            timeline = task_structure.get('timeline', '')
            if timeline:
                message += f"‚è∞ *–û–±—â–µ–µ –≤—Ä–µ–º—è:* {timeline}\n"
            
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error sending task structure: {e}")
    
    async def _send_mindmap_direct(self, query, context: ContextTypes.DEFAULT_TYPE, mindmap_data: dict):
        """Generate and send mindmap from callback"""
        try:
            # Generate mindmap image
            image_path = self.mindmap_generator.generate_mindmap_image(mindmap_data)
            
            if image_path and os.path.exists(image_path):
                # Send text file as document
                with open(image_path, 'rb') as doc:
                    await context.bot.send_document(
                        chat_id=query.from_user.id,
                        document=doc,
                        caption="üó∫Ô∏è *–ú–∞–π–Ω–¥–º—ç–ø (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)*",
                        parse_mode='Markdown'
                    )
                
                # Clean up file
                os.remove(image_path)
            else:
                # Send text mindmap as fallback
                text_mindmap = self.mindmap_generator.generate_mindmap_text(mindmap_data)
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text=text_mindmap,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error sending mindmap: {e}")
            # Send text mindmap as fallback
            text_mindmap = self.mindmap_generator.generate_mindmap_text(mindmap_data)
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=text_mindmap,
                parse_mode='Markdown'
            )
    
    async def _create_notion_plan(self, query, context: ContextTypes.DEFAULT_TYPE, text: str):
        """Create smart plan with Notion integration"""
        try:
            # Create smart plan
            plan_result = await self.planner.create_smart_plan(text)
            
            if plan_result.get("success"):
                # Send success message
                message = f"‚úÖ *–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω –≤ Notion!*\n\n"
                message += f"üéØ *–¶–µ–ª—å:* {plan_result.get('main_goal', '')}\n"
                message += f"üìã *–ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ:* {plan_result.get('tasks_created', 0)}\n"
                message += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(plan_result.get('categories', []))}\n"
                message += f"‚è∞ *–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:* {plan_result.get('timeline', '')}\n\n"
                message += f"üîó *–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π Notion –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á!*"
                
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # Send task details
                tasks = plan_result.get("tasks", [])
                if tasks:
                    task_message = "üìã *–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
                    for i, task in enumerate(tasks[:5], 1):  # Show first 5 tasks
                        priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.get("priority", "medium"), "üü°")
                        task_message += f"{priority_emoji} *{i}. {task.get('title', '')}*\n"
                        task_message += f"   ‚è±Ô∏è {task.get('estimated_time', '')}\n"
                        task_message += f"   üìÇ {task.get('category', '')}\n\n"
                    
                    await context.bot.send_message(
                        chat_id=query.from_user.id,
                        text=task_message,
                        parse_mode='Markdown'
                    )
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {plan_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            logger.error(f"Error creating Notion plan: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –≤ Notion.")
    
    async def _sort_material_direct(self, query, context: ContextTypes.DEFAULT_TYPE, text: str):
        """Sort material using AI and Notion"""
        try:
            # Sort material
            sort_result = await self.planner.sort_material(text)
            
            if sort_result.get("success"):
                message = f"‚úÖ *–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!*\n\n"
                message += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {sort_result.get('category', '')}\n"
                message += f"üè∑Ô∏è *–¢–µ–≥–∏:* {', '.join(sort_result.get('tags', []))}\n"
                message += f"‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {sort_result.get('priority', 'medium')}\n\n"
                message += f"üìù *–ê–Ω–∞–ª–∏–∑:*\n{sort_result.get('analysis', '')}\n\n"
                message += f"üîó *–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Notion!*"
                
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text=message,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {sort_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            logger.error(f"Error sorting material: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
    
    async def _show_main_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show main menu"""
        welcome_message = """
ü§ñ *AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–Ω–µ—Ä", callback_data="menu_planner")],
            [InlineKeyboardButton("üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_schedule")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="menu_tasks")],
            [InlineKeyboardButton("üìö –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="menu_materials")],
            [InlineKeyboardButton("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_planner_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show planner menu"""
        planner_message = """
üìÖ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω–Ω–µ—Ä*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üóìÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
‚Ä¢ üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ –±–æ—Ç—É
2. –£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø
3. –ü–æ–ª—É—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ Notion

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º! üìä
        """
        
        keyboard = [
            [InlineKeyboardButton("üóìÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu_schedule")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="menu_tasks")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(planner_message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _handle_schedule_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Handle schedule menu"""
        await query.edit_message_text("üóìÔ∏è –°–æ–∑–¥–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å...")
        
        try:
            # Create daily schedule
            schedule_result = await self.planner.create_daily_schedule()
            
            if schedule_result.get("success"):
                message = f"‚úÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!*\n\n"
                message += f"üìÖ *–î–∞—Ç–∞:* {schedule_result.get('date', '')}\n"
                message += f"üìã *–í—Å–µ–≥–æ –∑–∞–¥–∞—á:* {schedule_result.get('total_tasks', 0)}\n\n"
                
                time_blocks = schedule_result.get("time_blocks", [])
                for block in time_blocks:
                    message += f"‚è∞ *{block.get('time', '')}*\n"
                    message += f"   {block.get('title', '')}\n"
                    message += f"   –ó–∞–¥–∞—á: {len(block.get('tasks', []))}\n\n"
                
                message += f"üîó *–ü—Ä–æ–≤–µ—Ä—å Notion –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!*"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_result.get('error', '')}")
                
        except Exception as e:
            logger.error(f"Error creating schedule: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    
    async def _handle_tasks_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Handle tasks menu"""
        await query.edit_message_text("üìã –ü–æ–ª—É—á–∞—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
        
        try:
            # Get priority tasks
            tasks = await self.planner.get_priority_tasks(limit=10)
            
            if tasks:
                message = "üìã *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
                for i, task in enumerate(tasks, 1):
                    priority_emoji = {"üî¥ High": "üî¥", "üü° Medium": "üü°", "üü¢ Low": "üü¢"}.get(task.get("priority", "üü° Medium"), "üü°")
                    message += f"{priority_emoji} *{i}. {task.get('title', '')}*\n"
                    message += f"   üìÇ {task.get('category', '')}\n"
                    message += f"   ‚è±Ô∏è {task.get('estimated_time', '')}\n"
                    if task.get('due_date'):
                        message += f"   üìÖ {task.get('due_date')}\n"
                    message += "\n"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ø–ª–∞–Ω!")
                
        except Exception as e:
            logger.error(f"Error getting tasks: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
    
    async def _show_materials_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show materials menu"""
        materials_message = """
üìö *–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üìù –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
‚Ä¢ üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–≥–∏
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø–∞–º
‚Ä¢ ‚ö° –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ üîó –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Notion

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –±–æ—Ç—É
2. –£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç
3. –ü–æ–ª—É—á–∏ –∞–Ω–∞–ª–∏–∑ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é

–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã! üß†
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(materials_message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_status_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show status menu"""
        status_message = """
üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

‚úÖ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω
‚úÖ Audio Processor: –ì–æ—Ç–æ–≤
‚úÖ OpenAI Integration: –ì–æ—Ç–æ–≤
‚úÖ Mindmap Generator: –ì–æ—Ç–æ–≤
‚úÖ Personal Planner: –ì–æ—Ç–æ–≤
‚úÖ Notion Integration: –ì–æ—Ç–æ–≤

*–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
‚Ä¢ –ú–æ–¥–µ–ª—å OpenAI: GPT-3.5-turbo
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: 5 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: OGG, MP3, WAV, M4A
‚Ä¢ Notion API: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _show_help_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show help menu"""
        help_message = """
üìö *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ:*
‚Ä¢ OGG (–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram)
‚Ä¢ MP3, WAV, M4A

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç
‚Ä¢ –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: —Ä—É—Å—Å–∫–∏–π

*–ß—Ç–æ —è –¥–µ–ª–∞—é:*
1. üé§ –ü–æ–ª—É—á–∞—é —Ç–≤–æ–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
2. üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
3. üìù –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Google Speech Recognition
4. ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
5. üìã –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∑–∞–¥–∞—á
6. üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–∞–π–Ω–¥–º—ç–ø
7. üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç

*–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —á–µ—Ç–∫–æ
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéØ
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_message, parse_mode='Markdown', reply_markup=reply_markup)
    
    def run(self):
        """Start the bot"""
        if not TELEGRAM_BOT_TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
            return
        
        # Create application
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("planner", self.planner_command))
        application.add_handler(CommandHandler("schedule", self.schedule_command))
        application.add_handler(CommandHandler("tasks", self.tasks_command))
        application.add_handler(CommandHandler("expand", self.expand_command))
        
        # Handle audio and voice messages
        application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, self.handle_audio_message))
        
        # Handle text messages
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # Handle callback queries
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # Start the bot
        logger.info("Starting Telegram AI Assistant...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    import os
    bot = TelegramAIAssistant()
    bot.run()
