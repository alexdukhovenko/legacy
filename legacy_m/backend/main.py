"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è LEGACY M
"""

from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from sqlalchemy.orm import Session
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import uuid
import json
import logging
from datetime import datetime

import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'config.env')
if os.path.exists(env_file):
    load_dotenv(env_file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
production_env = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'config.production.env')
if os.path.exists(production_env):
    load_dotenv(production_env)

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import get_db, init_database, User, UserSession, ChatMessage
from database.models import QuranVerse, Hadith
from backend.simple_ai_agent import SimpleIslamicAIAgent
from backend.auth_routes import auth_router
from backend.auth_middleware import get_current_user, get_current_user_optional
from backend.auth_system import auth_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="LEGACY M - –ò—Å–ª–∞–º—Å–∫–∏–π –ò–ò-–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
    description="–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è—â–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/frontend", StaticFiles(directory="frontend"), name="frontend")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.include_router(auth_router)

# –ú–æ–¥–µ–ª–∏ Pydantic
class UserRequest(BaseModel):
    user_id: Optional[str] = None  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π

class UserResponse(BaseModel):
    user_id: str
    created: bool  # True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, False –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª

class ChatRequest(BaseModel):
    message: str
    confession: str  # 'sunni', 'shia', 'orthodox'

class ChatResponse(BaseModel):
    response: str
    sources: List[Dict[str, Any]]
    confidence: float
    session_id: str

class SessionResponse(BaseModel):
    session_id: str
    confession: str
    created_at: datetime

class ConfessionRequest(BaseModel):
    user_id: str
    confession: str  # 'sunni', 'shia', 'orthodox'

class ConfessionResponse(BaseModel):
    success: bool
    message: str
    confession: str

class ChatHistoryResponse(BaseModel):
    messages: List[Dict[str, Any]]
    confession: str

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        init_database()
        logger.info("‚úÖ LEGACY M –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/chat", response_class=HTMLResponse)
async def chat_redirect():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <meta http-equiv="refresh" content="0; url=/frontend/index.html">
        <title>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</title>
    </head>
    <body>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç...</p>
        <script>window.location.href = '/frontend/index.html';</script>
    </body>
    </html>
    """

@app.get("/", response_class=HTMLResponse)
@app.head("/")
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>LEGACY M - –ò—Å–ª–∞–º—Å–∫–∏–π –ò–ò-–ù–∞—Å—Ç–∞–≤–Ω–∏–∫</title>
        <style>
            body {
                font-family: 'Inter', sans-serif;
                background: linear-gradient(135deg, #2c1810 0%, #3d2817 25%, #4a2c1a 50%, #5d3a1f 75%, #6b4224 100%);
                color: #f4e4bc;
                margin: 0;
                padding: 0;
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .container {
                text-align: center;
                max-width: 800px;
                padding: 2rem;
            }
            h1 {
                font-size: 3rem;
                color: #d4af37;
                margin-bottom: 1rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            }
            p {
                font-size: 1.2rem;
                line-height: 1.6;
                margin-bottom: 2rem;
            }
            .api-link {
                display: inline-block;
                background: rgba(212, 175, 55, 0.8);
                color: #2c1810;
                padding: 15px 30px;
                text-decoration: none;
                border-radius: 25px;
                font-weight: 600;
                margin: 10px;
                transition: all 0.3s ease;
            }
            .api-link:hover {
                background: #d4af37;
                transform: scale(1.05);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>LEGACY M</h1>
            <p>–ò—Å–ª–∞–º—Å–∫–∏–π –ò–ò-–ù–∞—Å—Ç–∞–≤–Ω–∏–∫</p>
            <p>–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è—â–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤</p>
            <a href="/docs" class="api-link">API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
            <a href="/chat" class="api-link">–ß–∞—Ç</a>
        </div>
    </body>
    </html>
    """

@app.post("/api/user", response_model=UserResponse)
async def create_or_get_user(request: UserRequest, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ /api/auth/register
        # –≠—Ç–æ—Ç endpoint –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        raise HTTPException(status_code=410, detail="–≠—Ç–æ—Ç endpoint —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/auth/register")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

@app.post("/api/chat", response_model=ChatResponse)
async def chat_with_ai(
    request: ChatRequest, 
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ß–∞—Ç —Å –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = current_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏
        session = db.query(UserSession).filter(
            UserSession.user_id == user.id,  # user.id —É–∂–µ Integer
            UserSession.confession == request.confession,
            UserSession.is_active == 1
        ).first()
        
        if not session:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏
            session_id = auth_system.create_user_session(user.id, request.confession)
            if not session_id:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∏ –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏ {request.confession}")
        else:
            session_id = session.session_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = ChatMessage(
            session_id=session_id,
            message_type="user",
            content=request.message
        )
        db.add(user_message)
        
        # –°–æ–∑–¥–∞–µ–º –ò–ò-–∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏
        logger.info(f"ü§ñ –°–æ–∑–¥–∞–µ–º AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏: {request.confession}")
        ai_agent = SimpleIslamicAIAgent(db)
        logger.info(f"‚úÖ AI –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        logger.info(f"üí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {request.message[:50]}...")
        ai_response = ai_agent.generate_response(request.message, request.confession)
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {ai_response.get('response', '')[:100]}...")
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if len(ai_response['response']) > 800:
            short_response = ai_response['response'][:600] + "..."
            if "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:" not in short_response:
                short_response += "\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Å–≤—è—â–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∑–Ω–∞—é—â–µ–º—É –¥—É—Ö–æ–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
            ai_response['response'] = short_response
            logger.info(f"üîÑ API: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∫—Ä–∞—Ç–∏–ª –æ—Ç–≤–µ—Ç –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        ai_message = ChatMessage(
            session_id=session_id,
            message_type="ai",
            content=ai_response['response'],
            sources=json.dumps(ai_response['sources'], ensure_ascii=False) if ai_response['sources'] else None,
            confidence_score=ai_response['confidence']
        )
        db.add(ai_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if session:
            session.last_activity = datetime.utcnow()
        user.last_activity = datetime.utcnow()
        
        db.commit()
        
        return ChatResponse(
            response=ai_response['response'],
            sources=ai_response['sources'],
            confidence=ai_response['confidence'],
            session_id=session_id
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return ChatResponse(
            response="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            sources=[],
            confidence=0.0,
            session_id="error"
        )

@app.get("/api/user/{user_id}/chat/{confession}", response_model=ChatHistoryResponse)
async def get_user_chat_history(user_id: str, confession: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.id == int(user_id)).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–µ—Å—Å–∏–∏
        session = db.query(UserSession).filter(
            UserSession.user_id == user.id,
            UserSession.confession == confession,
            UserSession.is_active == 1
        ).first()
        
        if not session:
            return ChatHistoryResponse(messages=[], confession=confession)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        messages = db.query(ChatMessage).filter(
            ChatMessage.session_id == session.session_id
        ).order_by(ChatMessage.created_at.asc()).all()
        
        return ChatHistoryResponse(
            messages=[
                {
                    "id": msg.id,
                    "type": msg.message_type,
                    "content": msg.content,
                    "sources": json.loads(msg.sources) if msg.sources else None,
                    "confidence": msg.confidence_score,
                    "created_at": msg.created_at.isoformat()
                }
                for msg in messages
            ],
            confession=confession
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")

@app.get("/api/user/{user_id}/sessions")
async def get_user_sessions(user_id: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.id == int(user_id)).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sessions = db.query(UserSession).filter(
            UserSession.user_id == user.id,
            UserSession.is_active == 1
        ).order_by(UserSession.last_activity.desc()).all()
        
        return {
            "user_id": user_id,
            "sessions": [
                {
                    "session_id": session.session_id,
                    "confession": session.confession,
                    "created_at": session.created_at.isoformat(),
                    "last_activity": session.last_activity.isoformat()
                }
                for session in sessions
            ]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π")

@app.get("/api/user/{user_id}/info")
async def get_user_info(user_id: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.id == int(user_id)).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        active_sessions = db.query(UserSession).filter(
            UserSession.user_id == user.id,
            UserSession.is_active == 1
        ).count()
        
        return {
            "user_id": str(user.id),
            "name": user.name,
            "confession": user.confession,
            "created_at": user.created_at.isoformat(),
            "last_activity": user.last_activity.isoformat(),
            "active_sessions": active_sessions,
            "is_active": bool(user.is_active)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


@app.get("/api/verse/{verse_type}/{verse_id}")
async def get_verse_details(verse_type: str, verse_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—è—Ç–∞ –∏–ª–∏ —Ö–∞–¥–∏—Å–∞"""
    if verse_type == "quran":
        verse = db.query(QuranVerse).filter(QuranVerse.id == verse_id).first()
        if verse:
            return {
                "type": "quran",
                "surah_number": verse.surah_number,
                "verse_number": verse.verse_number,
                "arabic_text": verse.arabic_text,
                "translation_ru": verse.translation_ru,
                "translation_en": verse.translation_en,
                "commentary": verse.commentary,
                "theme": verse.theme
            }
    elif verse_type == "hadith":
        hadith = db.query(Hadith).filter(Hadith.id == verse_id).first()
        if hadith:
            return {
                "type": "hadith",
                "collection": hadith.collection,
                "book_number": hadith.book_number,
                "hadith_number": hadith.hadith_number,
                "arabic_text": hadith.arabic_text,
                "translation_ru": hadith.translation_ru,
                "translation_en": hadith.translation_en,
                "narrator": hadith.narrator,
                "grade": hadith.grade,
                "topic": hadith.topic,
                "commentary": hadith.commentary
            }
    
    return {"error": "Verse not found"}

@app.get("/api/health")
@app.head("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "healthy", "service": "LEGACY M"}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", os.getenv("$PORT", 8000)))
    workers = int(os.getenv("WORKERS", 1))
    environment = os.getenv("ENVIRONMENT", "development")
    
    if environment == "production":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º uvicorn –±–µ–∑ workers
        uvicorn.run(
            app, 
            host=host, 
            port=port, 
            access_log=True,
            log_level="info"
        )
    else:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        uvicorn.run(
            app, 
            host=host, 
            port=port, 
            reload=True,
            log_level="debug"
        )
