#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LEGACY M
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
"""

import os
import sys
import logging
import re
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_db
from database.models import QuranVerse, Hadith, Commentary, OrthodoxText, OrthodoxDocument

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FullDataLoader:
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_gen = get_db()
        self.db = next(self.db_gen)
        self.data_path = Path(__file__).parent.parent / "data"
        
    def load_quran_from_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ö–æ—Ä–∞–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –ö–æ—Ä–∞–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ö–æ—Ä–∞–Ω –∏–∑ –ø–∞–ø–∫–∏ –°—É–Ω–Ω–∏–∑–º
        sunni_quran_file = self.data_path / "–°—É–Ω–Ω–∏–∑–º" / "–ö–æ—Ä–∞–Ω. –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã.pdf"
        if sunni_quran_file.exists():
            logger.info("üìñ –ù–∞–π–¥–µ–Ω –ö–æ—Ä–∞–Ω –≤ –ø–∞–ø–∫–µ –°—É–Ω–Ω–∏–∑–º")
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª–∞
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ö–æ—Ä–∞–Ω –∏–∑ –ø–∞–ø–∫–∏ –®–∏–∏–∑–º
        shia_quran_file = self.data_path / "–®–∏–∏–∑–º" / "–ö–æ—Ä–∞–Ω. –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã.pdf"
        if shia_quran_file.exists():
            logger.info("üìñ –ù–∞–π–¥–µ–Ω –ö–æ—Ä–∞–Ω –≤ –ø–∞–ø–∫–µ –®–∏–∏–∑–º")
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª–∞
        
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.warning("‚ö†Ô∏è PDF —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        self._load_sample_quran()
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        arabic_verses = self._parse_quran_file(quran_arabic_file, "arabic")
        # –ü–∞—Ä—Å–∏–º —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        russian_verses = self._parse_quran_file(quran_russian_file, "russian")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for surah_num in arabic_verses:
            for verse_num in arabic_verses[surah_num]:
                if surah_num in russian_verses and verse_num in russian_verses[surah_num]:
                    verse_data = {
                        'surah_number': surah_num,
                        'verse_number': verse_num,
                        'arabic_text': arabic_verses[surah_num][verse_num],
                        'translation_ru': russian_verses[surah_num][verse_num],
                        'confession': None
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                    existing = self.db.query(QuranVerse).filter(
                        QuranVerse.surah_number == surah_num,
                        QuranVerse.verse_number == verse_num
                    ).first()
                    
                    if not existing:
                        quran_verse = QuranVerse(**verse_data)
                        self.db.add(quran_verse)
        
        self.db.commit()
        logger.info("‚úÖ –ö–æ—Ä–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤")
    
    def _parse_quran_file(self, file_path, text_type):
        """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –ö–æ—Ä–∞–Ω–∞"""
        verses = {}
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω [–°–£–†–ê:X:–ê–Ø–¢:Y]
        pattern = r'\[–°–£–†–ê:(\d+):–ê–Ø–¢:(\d+)\]\s*(.*?)(?=\[–°–£–†–ê:|\Z)'
        matches = re.findall(pattern, content, re.DOTALL)
        
        for surah_num, verse_num, text in matches:
            surah_num = int(surah_num)
            verse_num = int(verse_num)
            text = text.strip()
            
            if surah_num not in verses:
                verses[surah_num] = {}
            verses[surah_num][verse_num] = text
        
        return verses
    
    def _load_sample_quran(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ö–æ—Ä–∞–Ω–∞"""
        sample_verses = [
            {
                'surah_number': 1,
                'verse_number': 1,
                'arabic_text': 'ÿ®Ÿêÿ≥ŸíŸÖŸê ÿßŸÑŸÑŸéŸëŸáŸê ÿßŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸéŸ∞ŸÜŸê ÿßŸÑÿ±ŸéŸëÿ≠ŸêŸäŸÖŸê',
                'translation_ru': '–í–æ –∏–º—è –ê–ª–ª–∞—Ö–∞, –ú–∏–ª–æ—Å—Ç–∏–≤–æ–≥–æ, –ú–∏–ª–æ—Å–µ—Ä–¥–Ω–æ–≥–æ',
                'confession': None
            },
            {
                'surah_number': 1,
                'verse_number': 2,
                'arabic_text': 'ÿßŸÑŸíÿ≠ŸéŸÖŸíÿØŸè ŸÑŸêŸÑŸéŸëŸáŸê ÿ±Ÿéÿ®ŸêŸë ÿßŸÑŸíÿπŸéÿßŸÑŸéŸÖŸêŸäŸÜŸé',
                'translation_ru': '–•–≤–∞–ª–∞ –ê–ª–ª–∞—Ö—É, –ì–æ—Å–ø–æ–¥—É –º–∏—Ä–æ–≤',
                'confession': None
            },
            {
                'surah_number': 2,
                'verse_number': 3,
                'arabic_text': 'ÿßŸÑŸéŸëÿ∞ŸêŸäŸÜŸé ŸäŸèÿ§ŸíŸÖŸêŸÜŸèŸàŸÜŸé ÿ®ŸêÿßŸÑŸíÿ∫ŸéŸäŸíÿ®Ÿê ŸàŸéŸäŸèŸÇŸêŸäŸÖŸèŸàŸÜŸé ÿßŸÑÿµŸéŸëŸÑŸéÿßÿ©Ÿé',
                'translation_ru': '–ö–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—É—é—Ç –≤ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ –∏ –≤—ã—Å—Ç–∞–∏–≤–∞—é—Ç –º–æ–ª–∏—Ç–≤—É',
                'confession': None
            }
        ]
        
        for verse_data in sample_verses:
            existing = self.db.query(QuranVerse).filter(
                QuranVerse.surah_number == verse_data['surah_number'],
                QuranVerse.verse_number == verse_data['verse_number']
            ).first()
            
            if not existing:
                quran_verse = QuranVerse(**verse_data)
                self.db.add(quran_verse)
        
        self.db.commit()
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ö–æ—Ä–∞–Ω–∞")
    
    def load_hadith_from_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–∞–¥–∏—Å—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        logger.info("üìú –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞–¥–∏—Å—ã –∏–∑ —Ñ–∞–π–ª–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏ –®–∏–∏–∑–º
        shia_path = self.data_path / "–®–∏–∏–∑–º"
        if shia_path.exists():
            logger.info("üìú –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∏–∏—Ç—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
            for file_path in shia_path.glob("*.txt"):
                self._load_hadith_file(file_path, "–®–∏–∏–∑–º")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏ –°—É–Ω–Ω–∏–∑–º
        sunni_path = self.data_path / "–°—É–Ω–Ω–∏–∑–º"
        if sunni_path.exists():
            logger.info("üìú –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É–Ω–Ω–∏—Ç—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
            for file_path in sunni_path.glob("*.txt"):
                self._load_hadith_file(file_path, "–°—É–Ω–Ω–∏–∑–º")
        
        logger.info("‚úÖ –•–∞–¥–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
    
    def _load_hadith_file(self, file_path, source):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–∞–¥–∏—Å—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        logger.info(f"üìú –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞–¥–∏—Å—ã –∏–∑ {file_path.name}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º —Ö–∞–¥–∏—Å—ã
        pattern = r'\[–ò–°–¢–û–ß–ù–ò–ö:' + source + r':–ù–û–ú–ï–†:(\d+)\]\s*(.*?)(?=\[–ò–°–¢–û–ß–ù–ò–ö:|\Z)'
        matches = re.findall(pattern, content, re.DOTALL)
        
        for hadith_num, text in matches:
            hadith_num = int(hadith_num)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥
            lines = text.strip().split('\n')
            arabic_text = lines[0] if lines else ""
            translation_ru = lines[1] if len(lines) > 1 else ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–µ—Å—Å–∏—é
            confession = 'shia' if source == '–ê–ª—å-–ö–∞—Ñ–∏' else 'sunni'
            
            hadith_data = {
                'source': source,
                'hadith_number': hadith_num,
                'arabic_text': arabic_text,
                'translation_ru': translation_ru,
                'confession': confession
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            existing = self.db.query(Hadith).filter(
                Hadith.source == source,
                Hadith.hadith_number == hadith_num
            ).first()
            
            if not existing:
                hadith = Hadith(**hadith_data)
                self.db.add(hadith)
        
        self.db.commit()
    
    def load_orthodox_from_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        logger.info("‚õ™ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤...")
        
        orthodox_path = self.data_path / "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ"
        
        if not orthodox_path.exists():
            logger.warning("‚ö†Ô∏è –ü–∞–ø–∫–∞ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self._load_sample_orthodox()
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–∏–±–ª–∏—é
        bible_path = orthodox_path / "–ë–∏–±–ª–∏—è"
        if bible_path.exists():
            self._load_bible_files(bible_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥—ã
        fathers_path = orthodox_path / "–°–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ_—Ç—Ä—É–¥—ã"
        if fathers_path.exists():
            self._load_fathers_files(fathers_path)
        
        logger.info("‚úÖ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
    
    def _load_bible_files(self, bible_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –ë–∏–±–ª–∏–∏"""
        for file_path in bible_path.glob("*.txt"):
            self._load_bible_file(file_path)
    
    def _load_bible_file(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ë–∏–±–ª–∏–∏"""
        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–∏–±–ª–∏—é –∏–∑ {file_path.name}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç–∏—Ö–∏ –ë–∏–±–ª–∏–∏
        pattern = r'\[–ö–ù–ò–ì–ê:([^:]+):–ì–õ–ê–í–ê:(\d+):–°–¢–ò–•:(\d+)\]\s*(.*?)(?=\[–ö–ù–ò–ì–ê:|\Z)'
        matches = re.findall(pattern, content, re.DOTALL)
        
        for book_name, chapter_num, verse_num, text in matches:
            chapter_num = int(chapter_num)
            verse_num = int(verse_num)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥
            lines = text.strip().split('\n')
            original_text = lines[0] if lines else ""
            translation_ru = lines[1] if len(lines) > 1 else ""
            commentary = lines[2] if len(lines) > 2 else ""
            
            orthodox_data = {
                'source_type': '–ë–∏–±–ª–∏—è',
                'book_name': book_name,
                'author': '–°–≤—è—â–µ–Ω–Ω–æ–µ –ü–∏—Å–∞–Ω–∏–µ',
                'chapter_number': chapter_num,
                'verse_number': verse_num,
                'original_text': original_text,
                'translation_ru': translation_ru,
                'commentary': commentary,
                'theme': '–æ–±—â–µ–µ',
                'confession': 'orthodox'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            existing = self.db.query(OrthodoxText).filter(
                OrthodoxText.book_name == book_name,
                OrthodoxText.chapter_number == chapter_num,
                OrthodoxText.verse_number == verse_num
            ).first()
            
            if not existing:
                orthodox_text = OrthodoxText(**orthodox_data)
                self.db.add(orthodox_text)
        
        self.db.commit()
    
    def _load_fathers_files(self, fathers_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥—ã"""
        for file_path in fathers_path.glob("*.txt"):
            self._load_fathers_file(file_path)
    
    def _load_fathers_file(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏—Ö —Ç—Ä—É–¥–æ–≤"""
        logger.info(f"üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥—ã –∏–∑ {file_path.name}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥—ã
        pattern = r'\[–ê–í–¢–û–†:([^:]+):–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï:([^:]+):–°–¢–†–ê–ù–ò–¶–ê:(\d+)\]\s*(.*?)(?=\[–ê–í–¢–û–†:|\Z)'
        matches = re.findall(pattern, content, re.DOTALL)
        
        for author, work, page, text in matches:
            page = int(page)
            
            orthodox_data = {
                'source_type': '–°–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥—ã',
                'book_name': work,
                'author': author,
                'chapter_number': page,
                'verse_number': 1,
                'original_text': text.strip(),
                'translation_ru': text.strip(),
                'commentary': '',
                'theme': '–æ–±—â–µ–µ',
                'confession': 'orthodox'
            }
            
            orthodox_text = OrthodoxText(**orthodox_data)
            self.db.add(orthodox_text)
        
        self.db.commit()
    
    def _load_sample_orthodox(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        sample_texts = [
            {
                'source_type': '–ë–∏–±–ª–∏—è',
                'book_name': '–ï–≤–∞–Ω–≥–µ–ª–∏–µ –æ—Ç –ú–∞—Ç—Ñ–µ—è',
                'author': '–°–≤—è—Ç–æ–π –ú–∞—Ç—Ñ–µ–π',
                'chapter_number': 6,
                'verse_number': 9,
                'original_text': '–û—Ç—á–µ –Ω–∞—à, —Å—É—â–∏–π –Ω–∞ –Ω–µ–±–µ—Å–∞—Ö! –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ;',
                'translation_ru': '–û—Ç—á–µ –Ω–∞—à, —Å—É—â–∏–π –Ω–∞ –Ω–µ–±–µ—Å–∞—Ö! –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ;',
                'commentary': '–ú–æ–ª–∏—Ç–≤–∞ –ì–æ—Å–ø–æ–¥–Ω—è - –æ—Å–Ω–æ–≤–∞ —Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–æ–π –º–æ–ª–∏—Ç–≤—ã',
                'theme': '–º–æ–ª–∏—Ç–≤–∞',
                'confession': 'orthodox'
            }
        ]
        
        for text_data in sample_texts:
            existing = self.db.query(OrthodoxText).filter(
                OrthodoxText.book_name == text_data['book_name'],
                OrthodoxText.chapter_number == text_data['chapter_number'],
                OrthodoxText.verse_number == text_data['verse_number']
            ).first()
            
            if not existing:
                orthodox_text = OrthodoxText(**text_data)
                self.db.add(orthodox_text)
        
        self.db.commit()
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    def load_all_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            self.load_quran_from_files()
            self.load_hadith_from_files()
            self.load_orthodox_from_files()
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        finally:
            self.db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    loader = FullDataLoader()
    loader.load_all_data()

if __name__ == "__main__":
    main()
