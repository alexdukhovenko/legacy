#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–¥–∞—á –¥–ª—è –°–î–í–ì
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from enum import Enum

logger = logging.getLogger(__name__)

class TaskType(Enum):
    """–¢–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    URGENT = "urgent"           # –°—Ä–æ—á–Ω—ã–µ - Apple Reminders
    SCHEDULED = "scheduled"     # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ - Apple Calendar  
    PROJECT = "project"         # –ü—Ä–æ–µ–∫—Ç—ã - Notion
    HABIT = "habit"            # –ü—Ä–∏–≤—ã—á–∫–∏ - Apple Reminders
    IDEA = "idea"              # –ò–¥–µ–∏ - Notion Materials
    ROUTINE = "routine"        # –†—É—Ç–∏–Ω–∞ - Apple Reminders

class TaskRouter:
    """–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.apple_reminders = AppleRemindersIntegration()
        self.apple_calendar = AppleCalendarIntegration()
        self.notion = NotionIntegration()
        self.calendar_validator = CalendarValidator()
        
    async def route_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            task_type = await self._classify_task(text)
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            result = await self._send_to_service(task_type, text, user_id)
            
            return {
                "success": True,
                "task_type": task_type.value,
                "service": result["service"],
                "message": result["message"],
                "data": result.get("data", {})
            }
            
        except Exception as e:
            logger.error(f"Error routing task: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏"
            }
    
    async def _classify_task(self, text: str) -> TaskType:
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        """
        text_lower = text.lower()
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø–æ–º–æ—â—å—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        should_go_to_calendar, reason, event_time = self.calendar_validator.should_go_to_calendar(text)
        if should_go_to_calendar:
            return TaskType.SCHEDULED
        elif "–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ" in reason.lower() and "–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏" in reason.lower():
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            return TaskType.SCHEDULED
        
        # 2. –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        urgent_keywords = ["—Å—Ä–æ—á–Ω–æ", "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–±—ã—Å—Ç—Ä–æ", "–Ω–µ –∑–∞–±—ã—Ç—å"]
        if any(keyword in text_lower for keyword in urgent_keywords):
            return TaskType.URGENT
        
        # 3. –ü—Ä–∏–≤—ã—á–∫–∏
        habit_keywords = ["–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ø—Ä–∏–≤—ã—á–∫–∞", "—Ä–µ–≥—É–ª—è—Ä–Ω–æ", "—É—Ç—Ä–æ–º", "–≤–µ—á–µ—Ä–æ–º"]
        if any(keyword in text_lower for keyword in habit_keywords):
            return TaskType.HABIT
        
        # 4. –ü—Ä–æ–µ–∫—Ç—ã
        project_keywords = ["–ø—Ä–æ–µ–∫—Ç", "—Å–æ–∑–¥–∞—Ç—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å", "—Å–¥–µ–ª–∞—Ç—å", "–ø–æ—Å—Ç—Ä–æ–∏—Ç—å", "–∑–∞–ø—É—Å—Ç–∏—Ç—å"]
        if any(keyword in text_lower for keyword in project_keywords):
            return TaskType.PROJECT
        
        # 5. –†—É—Ç–∏–Ω–∞
        routine_keywords = ["–∫—É–ø–∏—Ç—å", "–∑–∞–±—Ä–∞—Ç—å", "–æ—Ç–Ω–µ—Å—Ç–∏", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"]
        if any(keyword in text_lower for keyword in routine_keywords):
            return TaskType.ROUTINE
        
        # 6. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–¥–µ—è
        return TaskType.IDEA
    
    async def _send_to_service(self, task_type: TaskType, text: str, user_id: int) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        """
        if task_type == TaskType.URGENT:
            return await self._handle_urgent_task(text, user_id)
        elif task_type == TaskType.SCHEDULED:
            return await self._handle_scheduled_task(text, user_id)
        elif task_type == TaskType.HABIT:
            return await self._handle_habit_task(text, user_id)
        elif task_type == TaskType.PROJECT:
            return await self._handle_project_task(text, user_id)
        elif task_type == TaskType.ROUTINE:
            return await self._handle_routine_task(text, user_id)
        else:  # IDEA
            return await self._handle_idea_task(text, user_id)
    
    async def _handle_urgent_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """–°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Üí Apple Reminders"""
        try:
            result = await self.apple_reminders.create_reminder(
                title=text,
                priority="high",
                due_date=datetime.now() + timedelta(hours=2)  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
            )
            
            return {
                "service": "Apple Reminders",
                "message": f"üî• **–°–†–û–ß–ù–ê–Ø –ó–ê–î–ê–ß–ê** –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Apple Reminders!\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞.",
                "data": result
            }
        except Exception as e:
            return {"service": "Apple Reminders", "message": f"‚ùå –û—à–∏–±–∫–∞: {e}"}
    
    async def _handle_scheduled_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ‚Üí Apple Calendar"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            should_go, reason, event_time = self.calendar_validator.should_go_to_calendar(text)
            
            if not should_go or not event_time:
                # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –Ω–æ —ç—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ - –≤—Å–µ —Ä–∞–≤–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                if "–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ" in reason.lower():
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 12:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    from datetime import datetime, timedelta
                    default_time = datetime.now() + timedelta(days=1)
                    default_time = default_time.replace(hour=12, minute=0, second=0, microsecond=0)
                    
                    result = await self.apple_calendar.create_event(
                        title=text,
                        start_time=default_time,
                        duration=60
                    )
                    
                    return {
                        "service": "Apple Calendar",
                        "message": f"üìÖ **–°–û–ë–´–¢–ò–ï** –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Apple Calendar!\n\n–í—Ä–µ–º—è: {default_time.strftime('%H:%M %d.%m')} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\nüí° –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ!",
                        "data": result
                    }
                else:
                    # –ï—Å–ª–∏ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Reminders
                    suggestions = self.calendar_validator.get_calendar_suggestions(text)
                    return {
                        "service": "Apple Reminders",
                        "message": f"üì± **–ó–ê–î–ê–ß–ê** –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Apple Reminders!\n\n{suggestions}",
                        "data": {"fallback": True}
                    }
            
            result = await self.apple_calendar.create_event(
                title=text,
                start_time=event_time,
                duration=60  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            return {
                "service": "Apple Calendar",
                "message": f"üìÖ **–°–û–ë–´–¢–ò–ï** –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Apple Calendar!\n\n–í—Ä–µ–º—è: {event_time.strftime('%H:%M %d.%m')}",
                "data": result
            }
        except Exception as e:
            return {"service": "Apple Calendar", "message": f"‚ùå –û—à–∏–±–∫–∞: {e}"}
    
    async def _handle_habit_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–∏–≤—ã—á–∫–∏ ‚Üí Apple Reminders —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º"""
        try:
            result = await self.apple_reminders.create_reminder(
                title=text,
                priority="medium",
                repeat="daily"
            )
            
            return {
                "service": "Apple Reminders",
                "message": f"üîÑ **–ü–†–ò–í–´–ß–ö–ê** –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Apple Reminders!\n\n–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
                "data": result
            }
        except Exception as e:
            return {"service": "Apple Reminders", "message": f"‚ùå –û—à–∏–±–∫–∞: {e}"}
    
    async def _handle_project_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–µ–∫—Ç—ã ‚Üí Notion"""
        try:
            result = await self.notion.create_project(
                title=text,
                description="–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
            )
            
            return {
                "service": "Notion",
                "message": f"üìã **–ü–†–û–ï–ö–¢** —Å–æ–∑–¥–∞–Ω –≤ Notion!\n\n–ú–æ–∂–µ—à—å –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω.",
                "data": result
            }
        except Exception as e:
            return {"service": "Notion", "message": f"‚ùå –û—à–∏–±–∫–∞: {e}"}
    
    async def _handle_routine_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """–†—É—Ç–∏–Ω–∞ ‚Üí Apple Reminders"""
        try:
            result = await self.apple_reminders.create_reminder(
                title=text,
                priority="medium",
                due_date=datetime.now() + timedelta(days=1)
            )
            
            return {
                "service": "Apple Reminders",
                "message": f"‚úÖ **–†–£–¢–ò–ù–ê** –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Apple Reminders!\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞.",
                "data": result
            }
        except Exception as e:
            return {"service": "Apple Reminders", "message": f"‚ùå –û—à–∏–±–∫–∞: {e}"}
    
    async def _handle_idea_task(self, text: str, user_id: int) -> Dict[str, Any]:
        """–ò–¥–µ–∏ ‚Üí Notion Materials"""
        try:
            result = await self.notion.create_material(
                title=f"üí° –ò–¥–µ—è: {text[:50]}...",
                content=text,
                tags=["–∏–¥–µ—è", "–∑–∞–º–µ—Ç–∫–∞"]
            )
            
            return {
                "service": "Notion",
                "message": f"üí° **–ò–î–ï–Ø** —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!\n\n–ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ.",
                "data": result
            }
        except Exception as e:
            return {"service": "Notion", "message": f"‚ùå –û—à–∏–±–∫–∞: {e}"}
    


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Apple
from apple_integration import AppleRemindersIntegration, AppleCalendarIntegration
from calendar_validator import CalendarValidator


class NotionIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)"""
    
    async def create_project(self, title: str, description: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ Notion"""
        logger.info(f"Creating Notion project: {title}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        from notion_integration import NotionPlanner
        planner = NotionPlanner()
        
        result = await planner.create_material_entry(
            title=f"üìã –ü—Ä–æ–µ–∫—Ç: {title}",
            content=description,
            category="project",
            tags=["–ø—Ä–æ–µ–∫—Ç", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        )
        
        return {
            "id": f"project_{datetime.now().timestamp()}",
            "title": title,
            "notion_success": result
        }
    
    async def create_material(self, title: str, content: str, tags: list) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ Notion"""
        logger.info(f"Creating Notion material: {title}")
        
        from notion_integration import NotionPlanner
        planner = NotionPlanner()
        
        result = await planner.create_material_entry(
            title=title,
            content=content,
            category="ideas",
            tags=tags
        )
        
        return {
            "id": f"material_{datetime.now().timestamp()}",
            "title": title,
            "notion_success": result
        }
